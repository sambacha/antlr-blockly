
var grammarFile="grammar Option;\r\n\r\noption\r\n    :   'option' BGNL\r\n        'default blockly generating:' defaultGenerating=BlocklyGenerating_List BGNL\r\n        'blockly runtime' BGNL blocklyRuntime=blocklyRuntimeStatement\r\n        'blocklyDiv' BGNL blocklyDiv=blocklyDivStatement\r\n        'toolbox' BGNL toolbox=toolboxStatement\r\n        'codeArea' BGNL codeArea=codeAreaStatement\r\n        'target' BGNL target=targetStatement\r\n    ;\r\n\r\nblocklyRuntimeStatement\r\n    :   'path' path=NormalString BGNL \r\n        'files' files=NormalString BGNL \r\n/* blocklyRuntimeStatement\r\ndefaultMap:{path:\"./\",files:'blockly_compressed.js, blocks_compressed.js, javascript_compressed.js, zh-hans.js'}\r\ncolor : this.blocklyRuntimeStatementColor\r\n*/\r\n// cdn demo:\r\n// {path:\"https://cdn.bootcdn.net/ajax/libs/blockly/3.20200402.1/\",files:'blockly.min.js, msg/zh-hans.min.js'}\r\n;\r\n\r\nblocklyDivStatement\r\n    :   'dymanic' BGNL \r\n        'id' id=NormalString BGNL \r\n    # dymanicSizeBlocklyDiv\r\n    |   'fixed size' BGNL\r\n        'id' id=NormalString BGNL \r\n        'height' height=NormalString 'width' width=NormalString\r\n    # fixedSizeBlocklyDiv\r\n/* dymanicSizeBlocklyDiv\r\ndefaultMap:{id:\"blocklyDiv\"}\r\ncolor : this.blocklyDivStatementColor\r\n*/\r\n/* fixedSizeBlocklyDiv\r\ntooltip:height,width are only used in generated html\r\ndefaultMap:{id:\"blocklyDiv\",height:\"480px\",width:\"940px\"}\r\ncolor : this.blocklyDivStatementColor\r\n*/\r\n;\r\n\r\ntoolboxStatement\r\n    :   'function' BGNL\r\n        'id' id=NormalString 'function' func=RawString BGNL \r\n    # toolboxFunc\r\n    |   'default' BGNL\r\n        'id' id=NormalString 'gap' gap=Int BGNL\r\n    # toolboxDefault\r\n/* toolboxFunc\r\ndefaultMap:{id:\"toolbox\",func:\"function(){return document.getElementById('toolboxXml')}\"}\r\ncolor : this.toolboxStatementColor\r\n*/\r\n/* toolboxDefault\r\ndefaultMap:{id:\"toolbox\",gap:5}\r\ncolor : this.toolboxStatementColor\r\n*/\r\n;\r\n\r\ncodeAreaStatement\r\n    :   'output' output=RawString BGNL\r\n/* codeAreaStatement\r\ndefaultMap:{output:\"function(err,data){document.getElementById('codeArea').innerText=err?String(err):data}\"}\r\ncolor : this.codeAreaStatementColor\r\n*/\r\n;\r\n\r\ntargetStatement\r\n    :   'Keep grammar and antlr-blockly as source' BGNL\r\n    # keepGrammar\r\n    |   'Generate target source without keeping grammar' BGNL\r\n    # independentFile\r\n/* keepGrammar\r\ncolor : this.targetStatementColor\r\n*/\r\n/* independentFile\r\ncolor : this.targetStatementColor\r\n*/\r\n;\r\n\r\nstatExprSplit : '=== statement ^ === expression v ===' ;\r\n\r\n// expression\r\n//     :   expression MulDivAddSub_List expression\r\n//     |   idExpr\r\n//     |   intExpr\r\n//     ;\r\n\r\nBlocklyGenerating_List : 'JSON'|'TEXT';\r\nRawString: ('asdsaw'+)*;\r\nNormalString: ('asdsaw'+)*;\r\n\r\n\r\nInt :   [0-9]+ ;\r\nBool:   'true'|'false' ;\r\nColor:   'asdfgdh'* ;\r\nBGNL:   'asfvaswvr'? 'asdvaswvr'? ;\r\n\r\nMeaningfulSplit : '=== meaningful ^ ===' ;\r\n\r\nNEWLINE:'\\r'? '\\n' ; \r\n        // return newlines to parser (is end-statement signal)\r\nWS  :   [ \\t]+ -> skip ;         // toss out whitespace\r\n\r\n\r\n/* Function_0\r\n// this.evisitor.recieveOrder='ORDER_NONE';\r\n// this.evisitor.valueColor=330;\r\n// this.evisitor.statementColor=300;\r\n// this.evisitor.entryColor=250;\r\nthis.evisitor.blocklyRuntimeStatementColor=135;\r\nthis.evisitor.blocklyDivStatementColor=160;\r\nthis.evisitor.toolboxStatementColor=180;\r\nthis.evisitor.codeAreaStatementColor=200;\r\nthis.evisitor.targetStatementColor=220;\r\n*/\r\n\r\n/* Functions\r\nfor (var key in OptionBlocks) {\r\n    if (OptionBlocks[key].json) {\r\n        OptionBlocks[key].json.nextStatement=undefined;\r\n    }\r\n}\r\n*/";
var option={"type":"option","defaultGenerating":"JSON","blocklyRuntime":{"type":"blocklyRuntimeStatement","path":"../../","files":"blockly_compressed.js, blocks_compressed.js, javascript_compressed.js, zh-hans.js"},"blocklyDiv":{"type":"fixedSizeBlocklyDiv","id":"blocklyDiv","height":"480px","width":"940px"},"toolbox":{"type":"toolboxDefault","id":"toolbox","gap":5},"codeArea":{"type":"codeAreaStatement","output":"function(err,data){window.parent.postMessage(err?String(err):data,'*')}"},"target":{"type":"keepGrammar"}};
option.target.type="independentFile";
var converter = Converter.withOption(grammarFile,option);
var script = document.createElement('script');
script.innerHTML = converter.js.text();
document.body.appendChild(script);

    // receive messege
    codeArea=document.getElementById('codeArea')
    function initAsBlock(blockName){
        var xml_text = OptionBlocks[blockName].xmlText();
        var xml = Blockly.Xml.textToDom('<xml>'+xml_text+'</xml>');
        OptionFunctions.workspace().clear();
        Blockly.Xml.domToWorkspace(xml, OptionFunctions.workspace());
    }
    function receiveFunc(event) {
        if (event.data._meta==='blockName') {
            initAsBlock(event.data.blockName);
            return;
        }
        OptionFunctions.parse(event.data);
    }
    window.addEventListener("message", receiveFunc, false);
    